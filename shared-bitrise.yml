---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
workflows:

  primary:
    before_run:
    - _setup
    after_run:
    - _report
    - _deploy_artifacts
    steps:
    - fastlane@3:
        inputs:
        - update_fastlane: 'false'
        - lane: ci
        title: Build & Test
    - script@1:
        title: Export test results
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Source: https://devcenter.bitrise.io/testing/exporting-to-test-reports-from-custom-script-steps/

            JUNIT=./artifacts/unit-tests/report.junit
            if [ ! -f "$JUNIT" ]; then
                echo "No JUnit file to export"
                exit 0
            fi
            # Creating the sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:
            test_run_dir="$BITRISE_TEST_RESULT_DIR/result_dir_1"
            mkdir "$test_run_dir"

            # Exporting the JUnit XML test report:
            cp "$JUNIT" "$test_run_dir/UnitTest.xml"

            # Creating the test-info.json file with the name of the test run defined:
            echo '{"test-name":"Tests scheme run"}' >> "$test_run_dir/test-info.json"
    - sonarqube-scanner@1:
        run_if: '{{getenv "SONAR_API_TOKEN" | ne "" | and (enveq "BITRISE_GIT_BRANCH" "master" | or (enveq "IS_RELEASE_BRANCH" "true") )}}'
        inputs:
        - scanner_properties: |-
            sonar.host.url=$SONAR_HOST_URL
            sonar.login=$SONAR_API_TOKEN
            sonar.c.file.suffixes=-
            sonar.cpp.file.suffixes=-
            sonar.objc.file.suffixes=-

  deploy:
    before_run:
    - _setup
    after_run:
    - _deploy_docs_worker    
    - _deploy_artifacts
    steps:
    - script@1:
        title: Lint and push Cocoapods trunk
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            bundle exec pod spec lint --allow-warnings
            bundle exec pod trunk push --allow-warnings --verbose

  deploy_docs:
    before_run:
    - _setup
    - _deploy_docs_worker

  _deploy_docs_worker:
    steps:
    - brew-install@0:
        title: Install svn
        inputs:
        - cache_enabled: 'yes'
        - upgrade: 'no'
        - packages: svn
    - fastlane@2:
        title: Generate and deploy Docs to Github Pages
        inputs:
        - update_fastlane: 'false'
        - lane: deploy_ghpages ghpages_url:$GIT_REPOSITORY_URL github_token:$PUBLISHER_GITHUB_API_TOKEN

  _deploy_artifacts:
    steps:
    - deploy-to-bitrise-io@2:
        is_always_run: true
        is_skippable: true
        inputs:
        - is_enable_public_page: "false"
        - deploy_path: ./artifacts
        - is_compress: "true"

  integration_tests:
    before_run:
    - _setup
    steps:
    - xcode-test@4:
        inputs:
        - scheme: IntegrationTests
        - destination: platform=iOS Simulator,name=iPhone 14,OS=latest
    - cache-push@2:
        inputs:
        - cache_paths: |-
            $BITRISE_CACHE_DIR
            $GEM_CACHE_PATH
    - slack@3:
        inputs:
        - channel: ''
        - webhook_url: "$SLACK_CHANNEL_WEBHOOK"
        - text: ''
        - title: ''
        - author_name: ''
        - channel_on_error: ''
        - pretext: ''
        - pretext_on_error: ''
        - message_on_error: |
            $BITRISE_APP_TITLE » $BITRISE_GIT_BRANCH (_$BITRISE_TRIGGERED_WORKFLOW_TITLE​_) - #$BITRISE_BUILD_NUMBER $SLACK_PR_INDICATOR
            ❌ *Failure*
            [Stack: $STACK_INFO]
            <$BITRISE_BUILD_URL|Open> $BITRISE_GIT_COMMIT
        - message: |
            $BITRISE_APP_TITLE » $BITRISE_GIT_BRANCH (_$BITRISE_TRIGGERED_WORKFLOW_TITLE​_) - #$BITRISE_BUILD_NUMBER $SLACK_PR_INDICATOR
            ✅ *Success*
            [Stack: $STACK_INFO]
            <$BITRISE_BUILD_URL|Open> $BITRISE_GIT_COMMIT
        - fields: ''
        - buttons: ''
        - footer: ''
        - footer_icon: ''
        - timestamp: 'no'
        - icon_url_on_error: ''
        - from_username_on_error: ''
        - color_on_error: "#d10b20"
        
  _setup:
    steps:
    - git-clone@6:
        inputs:
        - update_submodules: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Setup env vars
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            XCODE_VERSION=`/usr/bin/xcodebuild -version | grep Xcode`
            envman add --key STACK_INFO --value "$XCODE_VERSION"

            if [[ $BITRISE_GIT_BRANCH == release* ]]; then
                envman add --key IS_RELEASE_BRANCH --value "true"
            else
                envman add --key IS_RELEASE_BRANCH --value "false"
            fi

            if [ "$PR" = true ]; then
                envman add --key SLACK_PR_INDICATOR --value ":git:"
            else
                envman add --key SLACK_PR_INDICATOR --value ""
            fi
    - script@1:
        title: Bundle install
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            if [ ! -f "Gemfile" ]; then
                echo "No Gemfile detected. Skipping..."
                exit 0
            fi
            
            rbenv local 3.2.2
            bundle install
            RBENV_DIR="`cd $(rbenv which ruby)/../..;pwd`"
            echo "Gem cache directory: $RBENV_DIR"
            envman add --key GEM_CACHE_PATH --value $RBENV_DIR

    - brew-install@0:
        title: Install swiftlint
        inputs:
        - cache_enabled: 'yes'
        - upgrade: 'no'
        - packages: swiftlint
    - cocoapods-install@2:
        inputs:
        - verbose: 'false'

  _report:
    steps:
    - danger@2:
        inputs:
        - github_api_token: "$DANGER_GITHUB_API_TOKEN"
    - cache-push@2:
        inputs:
        - cache_paths: |-
            $BITRISE_CACHE_DIR
            $GEM_CACHE_PATH
