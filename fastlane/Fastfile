opt_out_usage

# vim:syntax=ruby:et:sts=2:sw=2:ts=2:ff=unix:

default_platform :ios

platform :ios do
  before_all do
    get_changelog_from_git
    get_version_from_date
  end

  desc "Run unit tests"
  lane :shared_tests do |options|
    if File.exist?('../Podfile')
      cocoapods(repo_update: ENV['REM_FL_CP_REPO_UPDATE'] || false)
    end

    lint_module

    scan_args = {
      clean: true,
      skip_build: true,
      output_directory: './artifacts/unit-tests',
      scheme: ENV['REM_FL_TESTS_SCHEME'] || 'Tests',
      device: ENV['REM_FL_TESTS_DEVICE'] || 'iPhone 14',
      code_coverage: true,
      slack_only_on_failure: true,
      skip_slack: ENV['PREVIOUS_BUILD_STATUS'] == 'error', # var defined in Bitrise step
      output_types: 'html,junit',
      output_files: 'report.html,report.junit'
    }

    if Gem::Version.new(Fastlane::VERSION) >= Gem::Version.create('2.201.0')
      scan_args[:xcodebuild_formatter] = 'xcpretty'
    end

    scan(scan_args)

    slather(
      output_directory: './artifacts/coverage',
      scheme: ENV['REM_FL_TESTS_SCHEME'] || 'Tests',
      sonarqube_xml: true,
      use_bundle_exec: true,
      proj: ENV['REM_FL_TESTS_PROJECT'],
      workspace: ENV['REM_FL_TESTS_WORKSPACE'],
      binary_basename: ENV['REM_FL_TESTS_SLATHER_BASENAME'],
      ignore: '*.{h,m}')

    begin
      check_dependencies
    rescue
      UI.error 'Dependency check errored. Please check logs'
    end
  end

  desc "Build a sample"
  lane :shared_sample do |options|

    # Increment version
    increment_build_number(build_number: lane_context[SharedValues::R_VERSION_FROM_DATE], xcodeproj: ENV['REM_FL_SAMPLE_PROJECT'])
    increment_version_number(version_number: lane_context[SharedValues::R_VERSION_FROM_DATE], xcodeproj: ENV['REM_FL_SAMPLE_PROJECT'])

    # Install pods
    podfile_path = ENV['REM_FL_SAMPLE_PODFILE'] || 'Samples/Podfile'
    if File.exist?("../#{podfile_path}")
      cocoapods(podfile: podfile_path, repo_update: ENV['REM_FL_CP_REPO_UPDATE'] || false)
    end
    
    # Build sample
    gym(
      configuration: "Release",
      output_directory: './artifacts/device',
      workspace: ENV['REM_FL_SAMPLE_WORKSPACE'],
      codesigning_identity: 'iPhone Distribution',
      export_method: 'enterprise',
      export_team_id: ENV['REM_FL_EXPORT_TEAM_ID'],
      export_options: {
        uploadBitcode: false,
        compileBitcode: false,
      },
      xcargs: ENV['REM_FL_SAMPLE_XCARGS'],
      scheme: ENV['REM_FL_SAMPLE_SCHEME'])
  end

  desc "Build everything"
  lane :shared_ci do |options|
    ENV['FL_COCOAPODS_VERBOSE'] = "1"
    shared_tests(options)
    shared_sample(options)
  end

  desc 'Module Pre-Release checks'
  lane :release do |options|

    if File.exist?('../Podfile')
      release_tag = version_get_podspec(path: ENV['REM_FL_PODSPEC_FILE'])
    else
      release_tag = options[:module]
    end
    module_name = options[:module]
    release_branch = options[:branch]

    sh 'launchctl remove com.apple.CoreSimulator.CoreSimulatorService || true'
    stg_lint

    # Remove the newline character from the release_tag otherwise it won't enter into if statement
    release_tag = release_tag.to_s.strip

    unless release_tag.empty?
      if !git_tag_exists(tag: "#{release_tag}")
        puts "#{release_tag} version doesn't exist, it will be tagged to master branch and push it to the remote. After the version is tagged, run 'release' lane again"

      ensure_git_branch(
          branch: "#{release_branch}"
      )

      add_git_tag(
         tag: "#{release_tag}"
      )
      sh "git push origin #{release_tag}"

      end
    end

    puts "generate documentation for #{module_name} version #{release_tag}"
    if File.exist?('../Podfile')
      cocoapods(repo_update: ENV['REM_FL_CP_REPO_UPDATE'] || false)
    end
    documentation(
      module_name: module_name,
      module_version: release_tag
    )
  end

  lane :lint_podspec do |options|
    if Dir.glob("../*.podspec").length > 0
      begin
        sh "bundle exec pod repo update"
      rescue
        # no Gemfile
        sh "pod repo update"
      end
      pod_lib_lint(sources: ["https://cdn.cocoapods.org", options[:source], ENV['REM_FL_PODSPEC_LINT_SOURCES']], allow_warnings: true, verbose: true)
    else
      UI.important 'No `.podspec` files found. Skipping Pod Lib Lint step'
    end
  end

  desc 'Lint the podspec on STG spec repo'
  lane :stg_lint do
    UI.message("REM_FL_STG_SPEC_REPO podspec source param isn't set") unless ENV["REM_FL_STG_SPEC_REPO"]
    lint_podspec(source: ENV['REM_FL_STG_SPEC_REPO'])
  end

  desc 'Lint the podspec on PROD spec repo'
  lane :prd_lint do
    UI.message("REM_FL_SPEC_REPO podspec source param isn't set") unless ENV["REM_FL_SPEC_REPO"]
    lint_podspec(source: ENV['REM_FL_SPEC_REPO'])
  end

  lane :lint_module do
  	check_artifacts_dir

    if is_ci?
      type = 'pmd'
      ocpath = './artifacts/lint-results.xml'
    else
      type = 'html'
      ocpath = './artifacts/lint-results.html'
    end

    module_name = ENV['REM_MODULE_NAME'] || ENV['REM_FL_TESTS_SLATHER_BASENAME']

    if Dir.glob("../*.podspec").length > 0
      bitrise_branch_name = ENV['BITRISE_GIT_BRANCH']

      if bitrise_branch_name == nil || bitrise_branch_name == 'master' || bitrise_branch_name.start_with?('release')
        begin
          prd_lint
        rescue
          UI.error '`pod lib lint` found a problem. Please check the logs above'
          raise
        end
      else
        UI.important 'Bitrise is not running on master or release branch. Skipping Pod Lib Lint step'
      end
    else
      UI.important 'No `.podspec` files found. Skipping Pod Lib Lint step'
    end

    if File.exist?('../.swiftlint.yml')
      begin
        swiftlint_pod_path = 'Pods/SwiftLint/swiftlint'
        swiftlint(
          mode: :lint,
          strict: true,
          executable: File.exist?("../#{swiftlint_pod_path}") ? swiftlint_pod_path : nil,
          ignore_exit_status: false)
      rescue
        UI.error '`swiftlint` found a problem. Please check the logs above'
        raise
      end
    else
      UI.important 'No `.swiftlint.yml` file found. Skipping SwiftLint step'
    end
    
  end

  desc "Run OWASP Dependency Check"
  lane :check_dependencies do |options|
    # Check Cocoapods
    dependency_check_ios_analyzer(
      project_name: ENV['REM_FL_TESTS_SLATHER_BASENAME'] || 'Project',
      output_types: 'html, json',
      skip_spm_analysis: true,
      cli_version: '8.2.1',
      output_directory: 'artifacts',
      suppression: ENV['REM_FL_DEP_CHECK_SUPPRESSION']
    )
    # Check SPM
    dependency_check_ios_analyzer(
      project_path: ENV['REM_FL_SPM_DIR_CONTAINING_XCODEPROJ'] || '.',
      project_name: ENV['REM_FL_TESTS_SLATHER_BASENAME'] || 'Project',
      output_types: 'html, json',
      skip_pods_analysis: true,
      cli_version: '8.2.1',
      output_directory: 'artifacts',
      suppression: ENV['REM_FL_DEP_CHECK_SUPPRESSION']
    )
  end

  desc "Generate documentation for module"
  lane :generate_docs do |options|
    documentation(
      module_name: options[:module_name],
      module_version: options[:module_version],
      docgen_script: options[:docgen_script]
    )
  end

  desc "Generate Jazzy documentation for module and deploy to GitHub Pages"
  lane :deploy_ghpages do |options|
    check_artifacts_dir
    gh_pages(
      ghpages_url: options[:ghpages_url],
      deploy_key: options[:deploy_key],
      github_token: options[:github_token]
    )
  end

  desc "Set up project, including git hooks"
  lane :setup_project do
    setup_git_hooks
  end

  def check_artifacts_dir
    Dir.mkdir '../artifacts' unless File.directory?('../artifacts')
  end
end
# vim:syntax=ruby:et:sts=2:sw=2:ts=2:ff=unix:
